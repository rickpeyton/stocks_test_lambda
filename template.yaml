AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  stocksLambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: stocksLambda
      Handler: lambda.handler
      Runtime: ruby2.5
      CodeUri: "./"
      MemorySize: 128
      Timeout: 5
      Events:
        stocksLambdaApi:
            Type: Api
            Properties:
                Path: /
                Method: get
                RestApiId: !Ref stocksLambdaApi
  stocksLambdaApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: stocksLambdaApi
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        basePath: '/Prod'
        info:
          title: !Ref AWS::StackName
        paths:
          /prices:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${stocksLambdaFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
          /stock:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${stocksLambdaFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - stocksLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref stocksLambdaFunction
      Principal: apigateway.amazonaws.com
Outputs:
  stocksLambdaAppUrl:
    Description: App endpoint URL
    Value: !Sub "https://${stocksLambdaApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
